C51 COMPILER V9.01   MAIN                                                                  04/12/2020 22:42:23 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE INCDIR(C:\SiLabs\MCU\INC) DEBUG OBJECTEXTEND

line level    source

   1          #include "c8051F020.h"
   2          
   3          sbit ground = P3 ^0;
   4          sbit floor1 = P3 ^1;
   5          sbit floor2 = P3 ^5;
   6          sbit floor3 = P3 ^3;
   7          sbit floor4 = P3 ^4;
   8          
   9          sbit ground_up = P0 ^7;
  10          sbit floor1_down = P0 ^6;
  11          sbit floor1_up = P0 ^5;
  12          sbit floor2_down = P0 ^4;
  13          sbit floor2_up = P0 ^3;
  14          sbit floor3_down = P0 ^2;
  15          sbit floor3_up = P0 ^1;
  16          sbit floor4_down = P0 ^0;
  17          
  18          
  19          sbit L3 = P1 ^2;
  20          sbit L1 = P1 ^3;
  21          sbit L2 = P1 ^4;
  22          sbit L4 = P1 ^5;
  23          
  24          
  25          sbit open_state = P1 ^0;
  26          sbit close_state = P1 ^1;
  27          
  28          sbit open = P3 ^2;
  29          
  30          
  31          sbit led0 = P2 ^0;
  32          sbit led1 = P2 ^1;
  33          sbit led2 = P2 ^2;
  34          sbit led3 = P2 ^3;
  35          sbit led4 = P2 ^4;
  36          
  37          sbit alarm_flex = P1^6;
  38          sbit ir_sensor = P3^7;
  39          sbit flex_sensor = P3^6;
  40          
  41          
  42          unsigned short timer_count0 = 0;
  43          unsigned short timer_count1 = 0;
  44          char request_in[5] = {0, 0, 0, 0, 0}; //request in elevator
  45          char request_out_up[5] = {0, 0, 0, 0, 0};
  46          char request_out_down[5] = {0, 0, 0, 0, 0};
  47          char orders_in[5] = {0, 0, 0, 0, 0};
  48          
  49          unsigned char wait = 0; //if there is request in some floor
  50          unsigned char f = 0;  // current floor number
  51          unsigned char up = 0;
  52          unsigned char down = 0;
  53          unsigned char start = 1;
  54          unsigned char move = 0;
  55          
C51 COMPILER V9.01   MAIN                                                                  04/12/2020 22:42:23 PAGE 2   

  56          
  57          void openLed(char index) {
  58   1          if (index == 0) {
  59   2              P2 = 0x3F;
  60   2          }
  61   1          if (index == 1) {
  62   2              P2 = 0x06;
  63   2          }
  64   1          if (index == 2) {
  65   2      
  66   2              P2 = 0x5B;
  67   2          }
  68   1          if (index == 3) {
  69   2              P2 = 0x4F;
  70   2          }
  71   1          if (index == 4) {
  72   2              P2 = 0x66;
  73   2          }
  74   1      }
  75          
  76          void wait5s(int time) {
  77   1      
  78   1          while (timer_count1 != time) {
  79   2              TMOD |= 0x10;  //16-bit timer0 selected
  80   2              TH1 = 0xF8;   // Loading high byte in TH
  81   2              TL1 = 0xCC;   // Loaded low byte in TL
  82   2              TR1 = 1;      // Running the timer
  83   2              while (!TF1);   //Checking the timer flag register if it is not equal to 1
  84   2              TR1 = 0;      // If TF0=1 stop the timer
  85   2              TF1 = 0;      // Clear the Timer Flag bit for next calculation
  86   2              timer_count1++;
  87   2          }
  88   1      }
  89          
  90          void increment(char arr[], char index) {
  91   1          char i = 0;
  92   1          arr[index] = 1;
  93   1          for (i = 0; i < 5; i++) {
  94   2              if (i != index)
  95   2                  arr[index] += arr[i];
  96   2          }
  97   1          openLed(index);
  98   1      }
  99          
 100          void get_request_in() {
 101   1      
 102   1          if (ground == 0) {
 103   2              request_in[0] = 1;
 104   2              increment(orders_in, 0);
 105   2          }
 106   1          if (floor1 == 0) {
 107   2              request_in[1] = 1;
 108   2              increment(orders_in, 1);
 109   2          }
 110   1          if (floor2 == 0) {
 111   2              request_in[2] = 1;
 112   2              increment(orders_in, 2);
 113   2          }
 114   1          if (floor3 == 0) {
 115   2              request_in[3] = 1;
 116   2              increment(orders_in, 3);
 117   2          }
C51 COMPILER V9.01   MAIN                                                                  04/12/2020 22:42:23 PAGE 3   

 118   1          if (floor4 == 0) {
 119   2              request_in[4] = 1;
 120   2              increment(orders_in, 4);
 121   2          }
 122   1          if (ground_up == 0) {
 123   2              request_out_up[0] = 1;
 124   2              increment(orders_in, 0);
 125   2          }
 126   1          if (floor1_up == 0) {
 127   2              request_out_up[1] = 1;
 128   2              increment(orders_in, 1);
 129   2          }
 130   1          if (floor2_up == 0) {
 131   2              request_out_up[2] = 1;
 132   2              increment(orders_in, 2);
 133   2          }
 134   1          if (floor3_up == 0) {
 135   2              request_out_up[3] = 1;
 136   2              increment(orders_in, 2);
 137   2          }
 138   1          if (floor1_down == 0) {
 139   2              request_out_down[1] = 1;
 140   2              increment(orders_in, 1);
 141   2          }
 142   1          if (floor2_down == 0) {
 143   2              request_out_down[2] = 1;
 144   2              increment(orders_in, 2);
 145   2          }
 146   1          if (floor3_down == 0) {
 147   2              request_out_down[3] = 1;
 148   2              increment(orders_in, 1);
 149   2          }
 150   1          if (floor4_down == 0) {
 151   2              request_out_down[4] = 1;
 152   2              increment(orders_in, 2);
 153   2          }
 154   1      
 155   1      }
 156          
 157          char get_first_request() {
 158   1          char i = 0;
 159   1          for (i = 0; i < 5; i++) {
 160   2              if (orders_in[i] == 1)
 161   2                  return i;
 162   2          }
 163   1          return 5;
 164   1      
 165   1      }
 166          
 167          
 168          char get_next_request(char direction, char begin_index) {
 169   1          if (direction == 1) {
 170   2              for (begin_index; begin_index < 5; begin_index++) {
 171   3                  if (orders_in[begin_index] != 0) {
 172   4                      return 1;
 173   4                  }
 174   3              }
 175   2              return 0;
 176   2          } else if (direction == 0) {
 177   2              for (begin_index; begin_index >= 0; begin_index--) {
 178   3                  if (orders_in[begin_index] != 0) {
 179   4                      return 1;
C51 COMPILER V9.01   MAIN                                                                  04/12/2020 22:42:23 PAGE 4   

 180   4                  }
 181   3              }
 182   2              return 0;
 183   2          }
 184   1      }
 185          
 186          void delete_order(char index) {
 187   1          orders_in[index] = 0;
 188   1      }
 189          
 190          unsigned char check_request() {
 191   1          char i = 0;
 192   1          for (i = 0; i < 5; i++) {
 193   2              if (request_in[i] == 1)
 194   2                  return 1;
 195   2              if (request_out_down[i] == 1)
 196   2                  return 1;
 197   2              if (request_out_up[i] == 1) {
 198   3                  return 1;
 199   3              }
 200   2      
 201   2          }
 202   1          return 0;
 203   1      }
 204          
 205          void motor(char count) {
 206   1          unsigned short i =0;
 207   1          switch (count){
 208   2              case 0:
 209   2                  L4=1;
 210   2                  L1=L2=L3=0;
 211   2                  break;
 212   2              case 1:
 213   2                  L3=1;
 214   2                  L1=L2=L4=0;
 215   2                  break;
 216   2              case 2:
 217   2                  L2=1;
 218   2                  L1=L3=L4=0;
 219   2                  break;
 220   2              case 3:
 221   2                  L1=1;
 222   2                  L4=L2=L3=0;
 223   2                  break;
 224   2              case 4:
 225   2                  L4=1;
 226   2                  L1=L2=L3=0;
 227   2                  break;
 228   2          }
 229   1          for (i = 0; i < 16300 ; ++i);
 230   1      }
 231          
 232          int main() {
 233   1          EA = 0;
 234   1          WDTCN = 0xde;
 235   1          WDTCN = 0xad;
 236   1          EA = 1;         //Enable global interrupt
 237   1          IE = 0x81;      // Internal interrupt enable
 238   1          ET0 = 1;        //Enable Timer0 interrupt
 239   1          TMOD = 0x01;  //16-bit timer0 selected
 240   1          TH0 = 0xFF;   // Loading high byte in TH
 241   1          TL0 = 0xFF;  // Loaded low byte in TL
C51 COMPILER V9.01   MAIN                                                                  04/12/2020 22:42:23 PAGE 5   

 242   1      
 243   1          P3 = 0xFF;
 244   1          P2 = 0x00;
 245   1          P1 = 0x03;
 246   1          P0 = 0xFF;
 247   1      
 248   1          while (1) {
 249   2              get_request_in();
 250   2              openLed(f);
 251   2      
 252   2              if (check_request()) {
 253   3                  if (start == 1) {
 254   4                      if (get_first_request() != 5) { //there is a request
 255   5                          if (f < get_first_request()) {
 256   6                              up = 1;
 257   6                              down = 0;
 258   6                          } else {
 259   6                              up = 0;
 260   6                              down = 1;
 261   6                          }
 262   5                          start = 0;
 263   5                      }
 264   4                  }
 265   3                  if ((request_in[f] == 1 || request_out_down[f] == 1 || request_out_up[f] == 1) &&
 266   3                      move == 0) { // order of to same position of elevator
 267   4                      request_in[f] = 0;
 268   4                      request_out_down[f] = 0;
 269   4                      request_out_up[f] = 0;
 270   4                      TR0 = 0;
 271   4                      open_state = 1;
 272   4                      close_state = 0;
 273   4                      wait5s(20000);
 274   4                                                      ################# IR SENSOR #############
*** WARNING C314 IN LINE 274 OF main.c: bad #directive syntax
 275   4                                      while (ir_sensor ==1)
 276   4                                      {
 277   5                                       open_state = 1;
 278   5                       close_state = 0;
 279   5                    
 280   5                                       }
 281   4                                       ############# Flex Sensor ########
*** WARNING C314 IN LINE 281 OF main.c: bad #directive syntax
 282   4                                       while (flex_sensor ==1)
 283   4                                       {
 284   5                                        open_state = 1;
 285   5                        close_state = 0;
 286   5                                        alarm_flex = 1;
 287   5                                       }
 288   4                                       alarm_flex = 0;
 289   4                      timer_count1 = 0;
 290   4                      open_state = 0;
 291   4                      close_state = 1;
 292   4                      wait = 0;
 293   4                      delete_order(f);
 294   4                  } else {
 295   4                      move = 1;
 296   4                      if (wait == 1) {
 297   5                          open_state = 1;
 298   5                          close_state = 0;
 299   5                          wait5s(2000);
 300   5                                                                      #################### IR SENSOR ##############
*** WARNING C314 IN LINE 300 OF main.c: bad #directive syntax
C51 COMPILER V9.01   MAIN                                                                  04/12/2020 22:42:23 PAGE 6   

 301   5                                              while (ir_sensor==1){
 302   6                                              open_state = 1;
 303   6                          close_state = 0;   
 304   6                                              }
 305   5                                              ################ Flex Sensor #############
*** WARNING C314 IN LINE 305 OF main.c: bad #directive syntax
 306   5                                              while(flex_sensor ==1){
 307   6                                              open_state = 1;
 308   6                           close_state = 0;
 309   6                                           alarm_flex = 1;
 310   6                                              }
 311   5                                              alarm_flex = 0;
 312   5                          timer_count1 = 0;
 313   5                          open_state = 0;
 314   5                          close_state = 1;
 315   5                          wait = 0;
 316   5                      } else {
 317   5                          open_state = 0;
 318   5                          close_state = 1;
 319   5                      }
 320   4                      TR0 = 1;
 321   4                  }
 322   3              } else {
 323   3                  if (wait == 1) {
 324   4                      open_state = 1;
 325   4                      close_state = 0;
 326   4                      wait5s(2000);
 327   4                                      ################## IR SENSOR ###################
*** WARNING C314 IN LINE 327 OF main.c: bad #directive syntax
 328   4                                      while (ir_sensor ==1)
 329   4                                      {
 330   5                                      open_state = 1;
 331   5                      close_state = 0;
 332   5                                      }
 333   4                                      ############ Flex Sensor ######
*** WARNING C314 IN LINE 333 OF main.c: bad #directive syntax
 334   4                                      while(flex_sensor ==1)
 335   4                                      {
 336   5                                      open_state = 1;
 337   5                      close_state = 0;
 338   5                                      alarm_flex = 1;
 339   5                                      }
 340   4                                      alarm_flex = 0;
 341   4                      timer_count1 = 0;
 342   4                      wait = 0;
 343   4                  }
 344   3                  TR0 = 0;
 345   3                  close_state = 1;
 346   3                  open_state = 0;
 347   3                  start = 1;
 348   3                  move = 0;
 349   3              }
 350   2              openLed(f);
 351   2          }
 352   1          return 0;
 353   1      }
 354          
 355          void Timer0(void) interrupt 1{
 356   1      
 357   1          if (timer_count0 < 50) {
 358   2              TR0 = 0;
 359   2              motor( timer_count0 % 5);
C51 COMPILER V9.01   MAIN                                                                  04/12/2020 22:42:23 PAGE 7   

 360   2              TR1 = 1;
 361   2              timer_count0++;
 362   2          } else {
 363   2              TR0 = 0; //stop timer
 364   2              if (up)
 365   2                  f++;
 366   2              if (down)
 367   2                  f--;
 368   2              openLed(f);
 369   2      
 370   2              if (request_in[f] == 1) {
 371   3                  wait = 1;
 372   3                  request_in[f] = 0; //delete request
 373   3                  delete_order(f);
 374   3                  if (up) {
 375   4                      if (request_out_up[f] == 1)
 376   4                          request_out_up[f] = 0;
 377   4                      if (get_next_request(1, f)) {
 378   5                          down = 0;
 379   5                          up = 1;
 380   5                      } else {
 381   5                          down = 1;
 382   5                          up = 0;
 383   5                      }
 384   4                  }
 385   3                  if (down) {
 386   4                      if (request_out_down[f] == 1)
 387   4                          request_out_down[f] = 0;
 388   4                      if (get_next_request(0, f)) {
 389   5                          up = 0;
 390   5                          down = 1;
 391   5                      } else {
 392   5                          up = 1;
 393   5                          down = 0;
 394   5                      }
 395   4                  }
 396   3      
 397   3              }
 398   2              if (up) {
 399   3                  if (f == 4) {
 400   4                      if (request_out_down[4] == 1) {
 401   5                          wait = 1;
 402   5                          request_out_down[4] = 0; //delete request
 403   5                          delete_order(4);
 404   5                      }
 405   4                  }
 406   3                  if (request_out_up[f] == 1) {
 407   4                      wait = 1;
 408   4                      request_out_up[f] = 0; //delete request
 409   4                      delete_order(f);
 410   4                  }
 411   3              }
 412   2              if (down) {
 413   3                  if (f == 0) {
 414   4                      if (request_out_up[0] == 1) {
 415   5                          wait = 1;
 416   5                          request_out_up[0] = 0; //delete request
 417   5                          delete_order(0);
 418   5                      }
 419   4                  }
 420   3                  if (request_out_down[f] == 1) {
 421   4                      wait = 1;
C51 COMPILER V9.01   MAIN                                                                  04/12/2020 22:42:23 PAGE 8   

 422   4                      request_out_down[f] = 0; //delete request
 423   4                      delete_order(f);
 424   4                  }
 425   3              }
 426   2              timer_count0 = 0;
 427   2          }
 428   1      }
 429          
 430          void INT0(void) interrupt 0{
 431   1          if (wait == 1) {
 432   2              timer_count1 = 0;
 433   2          }
 434   1      }
 435          
 436          
 437          
*** WARNING C291 IN LINE 184 OF MAIN.C: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1178    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
